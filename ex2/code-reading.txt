CSC 369 Fall 2010 - Excercise 2

Zeeshan Qureshi
g0zee@cdf.toronto.edu
$Id$

Q1: OS/161 does not support interrupt priorities(levels) thus you can only turn them on or off.

Q2: Under dumbvm a page is 4096 bytes and each process gets 12 pages for it's user-level stack.

Q3: The function 'as_copy' is used to create an exact copy of an address space.

Q4: The function 'mi_threadstart' is the entrypoint for new threads. 

Q5: OS/161 provides semaphores, locks and condition variables.

Q6: The error 'EINVAL' should be generated when a system call is invoked with invalid arguments.

Q7: The syscall number for execv is 1 (SYS_execv).

Q8: The file 'kern/main/main.c' contains the machine independent code for the 'sys_reboot' call.

The file 'kern/dev/lamebus/lamebus.c' contains the 'lamebus_poweroff' function which contains the actual machine dependent code that does the reboot.

Q9: If you change a header file then you will have to run 'make' and 'make install' again.

Q10: If you add a new header, then you will have to reconfigure and re-compile. Thus you'll have to re-run everything i.e. ./config, make depend, make and make install

Q11: 7 Subsystems are bootstrapped during the boot phase. They are ram, vm, scheduler, thread, vfs, dev and kprintf respectively.

Q12: No it's not okay to use kprintf before the threads subsystem has been initialized because kthread uses a lock(mutex) to synchronize which in turn depends on the threads subsystem to work properly.

Q13: The menu function runs inside the kernel (a hint is that it has a bunch of kprintf's which signify that it's running inside the kernel).

Q14: Three functions call 'mi_switch':

thread_exit  with MI_ZOMB to put the thread in the 'zombie' state since it's exiting (and should probably be killed later by the scheduler / whatever system handles zombies).
thread_ready with S_READY to put the thread in the 'ready' state since it's yielding the CPU to another thread, and thus should be run again later.
thread_sleep with S_SLEEP to put the thread in the 'sleeping' state(as the name of the function implies).

Q15: The function 'cmd_prog' is called to handle the 'p' command.

Q16: There is a function 'exorcise' that destroys the zombie threads and cleans up the queues. It gets called from 'mi_switch' when not switching to a new thread.

Q17: userptr_t is used to point to an address in USERSPACE. It is declared as a pointer to a one-byte struct __userptr.

Q18: The numerical value of the exception code for a MIPS system call is 8 (EX_SYS).

Q19: A MIPS instruction is 4 bytes (32 bits) since the tf_epc of a trapframe is incremented by 4 in 'mips_syscall'.

Q20: If a system call fails then it is forced to return -1 and errno is set (copied val from register v0), so we can test for the return value of the system call to determine if it failed or not.

If we still want to make sure, we can test that the register a3 is 0 (1 signifies error).
